- Class: meta
  Course: Programacao_em_R
  Lesson: Matrizes e Bases de Dados
  Author: Nick Carchedi (tradução Murilo Junqueira)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.4.4



- Class: text
  Output: Nesta lição, abordaremos matrizes e bases de dados (data frames). Ambos representam dados modelos "retangulares"
    de dados, o que significa que eles são usados para armazenar dados tabulares, com linhas e colunas.

- Class: text
  Output: A principal diferença, como você verá, é que as matrizes só podem conter uma única classe de dados,
    enquanto bases de dados (data frames) podem consistir em muitas classes diferentes de dados.

- Class: cmd_question
  Output: Vamos criar um vetor contendo os números de 1 a 20 usando o operador ':'. Armazene o
    resultar em uma variável chamada my_vector.
  CorrectAnswer: my_vector <- 1:20
  AnswerTests: omnitest(correctExpr='my_vector <- 1:20')
  Hint: Você aprendeu sobre o operador ':' na lição sobre seqüências. Se você quisesse criar um
    vetor contendo os números 1, 2 e 3 (nessa ordem), você pode usar c(1, 2, 3) ou 1:3.
    Nesse caso, queremos que os números de 1 a 20 sejam armazenados em uma variável chamada my_vector. Além disso,
    lembre-se de que você não precisa da função c() ao usar ':'.

- Class: cmd_question
  Output: Veja o conteúdo do vetor que você acabou de criar.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Digite my_vector para visualizar seu conteúdo.

- Class: cmd_question
  Output: A função dim() nos diz as 'dimensões' de um objeto. O que acontece se digitarmos
    dim(my_vector)? De uma tentativa.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Basta digitar dim(my_vector) para ver o que acontece.

- Class: cmd_question
  Output: Claramente, isso não é muito útil! Dado que my_vector é um vetor, ele não tem os atributos de 'dim'
    (por isso é apenas NULL), mas podemos encontrar seu comprimento usando a função length(). Tente isso agora.
  CorrectAnswer: length(my_vector)
  AnswerTests: omnitest(correctExpr='length(my_vector)')
  Hint: Digite length(my_vector) para visualizar o comprimento do vetor que você acabou de criar.

- Class: cmd_question
  Output: Ah! Isso é o que nós queríamos. Mas, o que acontece se dermos ao my_vector um atributo 'dim'?
    Vamos tentar. Digite dim(my_vector) <- c(4, 5).
  CorrectAnswer: dim(my_vector) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(my_vector) <- c(4, 5)')
  Hint: Digite dim(my_vector) <- c(4, 5) para dar ao my_vector um atributo 'dim'.

- Class: text
  Output: Tudo bem se esse último comando pareceu um pouco estranho para você. Deveria ser assim mesmo! A função dim()
    permite que você obtenha OU configure o atributo 'dim' para um objeto no R. Neste caso, nós
    atribuimos o valor c(4, 5) ao atributo 'dim' de my_vector.

- Class: cmd_question
  Output: Use dim(my_vector) para confirmar se definimos corretamente o atributo 'dim'.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Apenas digite dim(my_vector) para ter certeza que o atributo 'dim' foi definido.

- Class: cmd_question
  Output: Outra maneira de ver isso é chamando a função attributes() no my_vector. Tente agora.
  CorrectAnswer: attributes(my_vector)
  AnswerTests: omnitest(correctExpr='attributes(my_vector)')
  Hint: O comando attributes(my_vector) mostrará todos os atributos do objeto my_vector.

- Class: text
  Output: Assim como na aula de matemática, quando se lida com um objeto bidimensional (pense em mesa retangular),
    o primeiro atributo é o número de linhas e o segundo é o número de colunas. Portanto, nós apenas
    demos ao objeto my_vector 4 linhas e 5 colunas.

- Class: cmd_question
  Output: Mas espere! Isso não parece mais um vetor. Bem, não é. Agora é uma matriz.
    Veja o conteúdo de my_vector agora para ver como é.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Digite my_vector para visualizar seu conteúdo.

- Class: cmd_question
  Output: Agora, vamos confirmar que é realmente uma matriz usando a função class(). Digite
    class(my_vector) para ver que tipo de objeto é 'my_vector'.
  CorrectAnswer: class(my_vector)
  AnswerTests: omnitest(correctExpr='class(my_vector)')
  Hint: Digite class(my_vector) para visualizar a classe my_vector.

- Class: cmd_question
  Output: Com certeza, my_vector é agora uma matriz. Devemos armazená-lo em uma nova variável que nos ajude
    a lembramos do que ela é. Armazene o valor de my_vector em uma nova variável chamada my_matrix.
  CorrectAnswer: my_matrix <- my_vector
  AnswerTests: omnitest(correctExpr='my_matrix <- my_vector')
  Hint: Como não podemos alterar apenas o nome da nossa variável my_vector, atribuiremos seu valor
    para uma nova variável com my_matrix <- my_vector.

- Class: text
  Output: O exemplo que usamos até agora foi concebido para ilustrar o ponto em que uma matriz é
    simplesmente um vetor atômico com um atributo de dimensão. Um método mais direto de criar a
    mesma matriz usa a função matrix().

- Class: cmd_question
  Output: Chame o arquivo de ajuda para a função matrix() agora usando a função '?'.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: O comando ?matrix fará o truque.

- Class: cmd_question
  Output: Agora, olhe a documentação para a função de matriz e veja se você adivinhar
    como criar uma matriz contendo os mesmos números (1-20) e dimensões
    (4 linhas, 5 colunas) chamando a função matrix(). Armazene o resultado em um
    variável chamada my_matrix2.
  CorrectAnswer: my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: calculates_same_value('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('my_matrix2')
  Hint: "Chame a função matrix() com três argumentos: '1:20', o número de linhas,
    e o número de colunas. Certifique-se de especificar argumentos pelos nomes corretos e
    armazena o resultado em my_matrix2(não em my_matrix)."

- Class: cmd_question
  Output: Finalmente, vamos confirmar que my_matrix e my_matrix2 são realmente idênticas. o
    A função identical() nos dirá se os dois primeiros argumentos são os mesmos. Experimente.
  CorrectAnswer: identical(my_matrix, my_matrix2)
  AnswerTests: any_of_exprs('identical(my_matrix, my_matrix2)', 'identical(my_matrix2, my_matrix)')
  Hint: Se você não tem certeza sobre este, então verifique a documentação para identical()
    usando a função '?'

- Class: text
  Output: Agora, imagine que os números em nossa tabela representam algumas medidas de um
    experimento, onde cada linha representa um paciente e cada coluna representa uma variável
    para o qual foram feitas medições.

- Class: text
  Output: Podemos querer rotular as linhas, para que possamos saber quais números pertencem a cada paciente
    do experimento. Uma maneira de fazer isso é adicionar uma coluna à matriz que contém os
    nomes de todas as quatro pessoas.

- Class: cmd_question
  Output: Vamos começar criando um vetor de caracteres contendo os nomes dos nossos pacientes - Bill,
    Gina, Kelly e Sean. Lembre-se que as aspas duplas dizem ao R que algo é uma cadeia de caracteres.
    Armazene o resultado em uma variável chamada 'patients'.
  CorrectAnswer: patients <- c("Bill", "Gina", "Kelly", "Sean")
  AnswerTests: omnitest(correctExpr='patients <- c("Bill", "Gina", "Kelly", "Sean")')
  Hint: Certifique-se de colocar em maiúscula a primeira letra de cada nome e armazenar o resultado em uma variável
    chamados pacientes. Além disso, não confunda a ordem dos pacientes! Isso seria um desastre!

- Class: cmd_question
  Output: Agora vamos usar a função cbind() para "combinar colunas". Não se preocupe em armazenar o
    resultar em uma nova variável. Apenas chame cbind() com dois argumentos - o vetor de pacientes e my_matrix.
  CorrectAnswer: cbind(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='cbind(patients, my_matrix)')
  Hint: Digite cbind(patients, my_matrix) para adicionar os nomes de nossos pacientes à matriz de números.

- Class: text
  Output: Algo é suspeito sobre o nosso resultado! Parece que combinar o vetor de caracteres com
    nossa matriz de números fez com que tudo fosse colocado entre aspas duplas. Isso significa que fomos deixados
    com uma matriz de caracteres, o que não é bom.

- Class: text
  Output: Se você se lembra do início desta lição, eu lhe disse que as matrizes só podem
    conter uma única classe de dados. Portanto, quando tentamos combinar um vetor de caracteres vetores numéricos na
    matriz, o R foi forçado a "coagir" os números para caracteres, daí as aspas duplas.

- Class: text
  Output: Isso é chamado de "coerção implícita", porque isso foi feito sem que pedíssemos isso explicitamente. 
    Apenas aconteceu. Mas por que não apenas convertemos os nomes de nossos pacientes em números? 
    Eu vou deixar você refletir sobre essa questão por conta própria.

- Class: cmd_question
  Output: "Então, ainda nos resta a questão de como incluir os nomes de nossos pacientes na
    tabela sem destruir a integridade de nossos dados numéricos. 
    Tente o seguinte: my_data <- data.frame(patients, my_matrix)"
  CorrectAnswer: my_data <- data.frame(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='my_data <- data.frame(patients, my_matrix)')
  Hint: Digite my_data <- data.frame(patients, my_matrix), para que possamos explorar o que acontece.

- Class: cmd_question
  Output: Agora, veja o conteúdo de my_data para ver o que criamos.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Digite my_data para visualizar seu conteúdo.

- Class: text
  Output: Parece que a função data.frame() nos permitiu armazenar nosso vetor de caracteres de nomes
    bem ao lado de nossa matriz de números. Isso é exatamente o que estávamos esperando!

- Class: text
  Output: Nos bastidores, a função data.frame() pega qualquer número de argumentos e retorna um único
    objeto da classe 'data.frame' que é composto dos objetos originais.

- Class: cmd_question
  Output: Vamos confirmar isso chamando a função class() em nosso quadro de dados recém-criado.
  CorrectAnswer: class(my_data)
  AnswerTests: omnitest(correctExpr='class(my_data)')
  Hint: A função de classe recebe um argumento - o objeto do qual você deseja determinar a classe.

- Class: text
  Output: Também é possível atribuir nomes às linhas e colunas individuais de um quadro de dados,
    apresenta outra maneira possível de determinar qual linha de valores em nossa tabela pertence a cada paciente.

- Class: text
  Output: No entanto, como já resolvemos esse problema, vamos resolver um problema diferente atribuindo
    nomes para as colunas do nosso quadro de dados para que saibamos que tipo de medida cada coluna representa.

- Class: cmd_question
  Output: Como temos seis colunas (incluindo nomes de pacientes), primeiro precisamos criar um vetor
    contendo um elemento para cada coluna. Crie um vetor de caracteres chamado cnames que contém o
    valores seguintes (em ordem) - "paciente", "idade", "peso", "pb", "avaliação", "teste".
  CorrectAnswer: cnames <- c("paciente", "idade", "peso", "pb", "avaliação", "teste")
  AnswerTests: omnitest(correctExpr='cnames <- c("paciente", "idade", "peso", "pb", "avaliação", "teste")')
  Hint: Certifique-se de que todos os nomes estejam em minúsculas, entre aspas duplas e separados por vírgulas.
    Não esqueça de usar a função c().

- Class: cmd_question
  Output: Agora, use a função colnames() para definir o atributo 'colnames' para o nosso quadro de dados. Isto é
    semelhante à maneira como usamos a função dim() anteriormente nesta lição.
  CorrectAnswer: colnames(my_data) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(my_data) <- cnames')
  Hint: Tente colnames(my_data) <- cnames.

- Class: cmd_question
  Output: Vamos ver se isso deu certo. Imprima o conteúdo de my_data.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Imprima o conteúdo de my_data no console.

- Class: text
  Output: Nesta lição, você aprendeu o básico de trabalhar com dois dados muito importantes e comuns
    estruturas - matrizes e bases de dados (data frames). Há muito mais a aprender e estaremos cobrindo mais
    tópicos avançados, particularmente com relação a bases de dados (data frames), em lições futuras.

  
- Class: mult_question
  Output: Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição?
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  

- Class: meta
  Course: Programacao em R
  Lesson: Extraindo Subconjuntos de vetores
  Author: Nick Carchedi (Tradução Murilo Junqueira)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Nesta lição, veremos como extrair elementos de um vetor com base em algumas
    condições que especificamos.

- Class: text
  Output: Por exemplo, podemos estar interessados apenas nos 20 primeiros elementos de um vetor,
    ou apenas os elementos que não são NA, ou somente aqueles que são positivos ou correspondem
    para uma variável específica de interesse. No final desta lição, você saberá como
    lidar com cada um desses cenários.

- Class: cmd_question
  Output: Eu criei para você um vetor chamado x que contém uma ordem aleatória de 20
    números (de uma distribuição normal padrão) e 20 NAs. Digite x agora para ver o que
    parece.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digite x para visualizar seu conteúdo.

- Class: text
  Output: A maneira como você diz ao R que deseja selecionar alguns elementos específicos 
    (extrair um 'subconjunto') de um vetor é colocando um 'vetor índice' entre colchetes 
    imediatamente após o nome do vetor.

- Class: cmd_question
  Output: Para um exemplo simples, tente x[1:10] para visualizar os primeiros dez elementos de x.
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: Veja os primeiros dez elementos de x com x[1:10].

- Class: text
  Output: Os vetores de índices vêm em quatro tipos diferentes - vetores lógicos, vetores de
    inteiros positivos, vetores de inteiros negativos e vetores de caracteres (strings)
     - vamos abordar cada um desses tipos nesta lição.

- Class: text
  Output: Vamos começar explorando os índices de vetores lógicos. Um cenário comum, quando se trabalha
    com dados do mundo real, é quando queremos extrair todos os elementos de um vetor que não são
    NA (ou seja, dados faltantes). Lembre-se de que is.na(x) produz um vetor de valores lógicos do mesmo
    comprimento que x, sendo que os valores TRUE (verdadeiros) correspondentes aos valores de NA em x e FALSE
    (falsos) correspondentes a valores não-NA em x.

- Class: mult_question
  Output: O que você acha que x[is.na(x)] lhe dará?
  AnswerChoices: Um vetor de todos os NAs; Um vetor sem NAs; Um vetor de VERDADEIROS e FALSOS;
    Um vetor de comprimento 0
  CorrectAnswer: Um vetor de todos os NAs
  AnswerTests: omnitest(correctVal="Um vetor de todos os NAs")
  Hint: Lembre-se que is.na(x) nos diz onde os NAs estão em um vetor. Então, se criarmos um subconjunto de x
    com base em is.na(x), o que você espera que aconteça?

- Class: cmd_question
  Output: Prove para si mesmo digitando x[is.na(x)].
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Digite x[is.na(x)] para ver se obtém todos os NAs, o que claramente não é o que queremos!

- Class: cmd_question
  Output: Lembre que '!' Nos dá a negação de uma expressão lógica, então !is.na(x) pode
    ser lido como 'não é NA'. Portanto, se quisermos criar um vetor chamado y que contenha
    todos os valores não-NA de x, podemos usar y <- x[!is.na(x)]. Tente isso!
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Digite y <- x[!is.na(x)] para capturar todos os valores não faltantes de x.

- Class: cmd_question
  Output: Imprima y no console.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digite y para visualizar seu conteúdo.

- Class: text
  Output: Agora que isolamos os valores não-ausentes de x e os colocamos em y,
    podemos extrair valores y com base em outros critérios.

- Class: mult_question
  Output: Lembre-se que a expressão y > 0 nos dará um vetor de valores lógicos de mesmo
    comprimento que y, sendo que os TRUEs correspondem a valores de y que são maiores que zero e os FALSEs
    correspondem a valores de y que são menores ou iguais a zero. O que você acha
    y[y > 0] vai te dar?
  AnswerChoices: Um vetor de todos os elementos positivos de y; Um vetor de todos os elementos negativos de y;
    Um vetor de todos os NAs; Um vetor de comprimento 0; Um vetor de TRUEs e FALSEs
  CorrectAnswer: Um vetor de todos os elementos positivos de y
  AnswerTests: omnitest(correctVal="Um vetor de todos os elementos positivos de y")
  Hint: A expressão lógica y > 0 nos dará TRUE para cada elemento de y que é positivo.
    Com base nisso, o que você acha que y[y > 0] retornará?

- Class: cmd_question
  Output: Digite y[y> 0] para ver se obtemos todos os elementos positivos de y, que também são os
    elementos positivos do nosso vetor original x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Digite y[y > 0] para ver apenas os elementos positivos de y.

- Class: cmd_question
  Output: Você pode se perguntar por que nós não começamos com x[x > 0] para isolar os elementos
    positivos de x. Tente isso agora para ver o porquê.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Tente x[x > 0] para ver por que não usamos essa abordagem.

- Class: text
  Output: Como NA não é um valor, mas sim um espaço reservado para uma quantidade desconhecida, a expressão
    NA > 0 avalia os NAs. Por isso, temos um monte de NAs misturados aos nossos números positivos quando fazemos isso.

- Class: cmd_question
  Output: "Combinando nosso conhecimento de operadores lógicos com nosso novo conhecimento de subconjuntos,
    nós poderíamos fazer isso: x[!is.na(x) & x > 0]. Experimente."
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Tente x[!is.na(x) & x > 0] para ver o que você se obtém.

- Class: text
  Output: Neste caso, solicitamos apenas valores de x que são ambos não-ausentes E
    maior que zero.

- Class: text
  Output: Já mostramos como extrair apenas os primeiros dez valores de x usando x[1:10].
    Neste caso, estamos fornecendo um vetor de inteiros positivos dentro dos colchetes,
    que diz ao R para retornar apenas os elementos de x numerados de 1 a 10.

- Class: text
  Output: Muitas linguagens de programação usam o que é chamado de 'indexação baseada em zero', o que significa que
    o primeiro elemento de um vetor é considerado o elemento 0. O R usa 'indexação baseada em um', que
    (você adivinhou!) significa que o primeiro elemento de um vetor é considerado o elemento 1.

- Class: cmd_question
  Output: "Você consegue descobrir como extrairiamos os elementos 3, 5 e 7 de x? Dica: Use
    a função c() para especificar os números dos elementos como um vetor numérico."
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Crie um vetor de índices com c(3, 5, 7), depois coloque dentro do
    colchetes.

- Class: cmd_question
  Output: É importante que ao usar vetores inteiros para extrair subconjuntos do vetor x,
    nos mantenhamos dentro do número de elementos de x {1, 2, ..., 40}, dado que  x só tem 40 elementos. 
    O que acontece se pedirmos o elemento zero de x (isto é, x[0])? Tente isso!
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Tente x[0] para ver o que acontece quando nos referimos ao elemento zero de um vetor,
    que não está definido em R.

- Class: cmd_question
  Output: Como você poderia esperar, não temos nada útil. Infelizmente, R não nos impede
    de fazer isso. O que aconteceria se pedissemos o 3000º elemento de x? Experimente.
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Solicite o 3000º elemento de x (que não existe) com x[3000].

- Class: text
  Output: "Mais uma vez, nada de útil, mas R não nos impede de pedir por isso. Isso
    deve servir de aviso: você deve sempre se certificar de que o que você está pedindo
    está dentro dos limites do vetor com o qual você está trabalhando."

- Class: text
  Output: E se estivermos interessados em todos os elementos de x EXCETO o 2º e o 10º? Seria
    muito tedioso construir um vetor contendo todos os números de 1 a 40, exceto 2 e 10.

- Class: cmd_question
  Output: Felizmente, R aceita índices inteiros negativos. Considerando que x[c(2, 10)] nos dá SOMENTE
    2º e 10º elementos de x, x[c(-2, -10)] nos dá todos os elementos de x EXCETO para o 2º
    e 10 elementos. Tente x[c(-2, -10)] agora para ver isso.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Tente x[c(-2, -10)].

- Class: cmd_question
  Output: Uma maneira abreviada de especificar vários números negativos é colocar o sinal negativo
    na frente do vetor de números positivos. Digite x[-c(2, 10)] para obter o mesmo resultado exato.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Use x[-c(2, 10)] para simplificar um pouco as coisas. Isso pode economizar tempo se for para especificar
    muitos índices negativos.

- Class: text
  Output: "Até agora, cobrimos três tipos de vetores de índices: inteiro positivo, lógico
    e inteiro negativo. O único tipo remanescente requer que introduzamos o conceito de elementos 'nomeados'."

- Class: cmd_question
  Output: Crie um vetor numérico com três elementos nomeados usando vect <- c(foo = 11, bar = 2, norf = NA).
  CorrectAnswer: vect <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Crie um vetor nomeado com vect <- c(foo = 11, bar = 2, norf = NA).

- Class: cmd_question
  Output: Quando imprimimos o vect no console, você verá que cada elemento tem um nome. Experimente.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Digite vect para visualizar seu conteúdo.

- Class: cmd_question
  Output: Nós também podemos obter os nomes de vect passando vect como um argumento para os names()
    função. Dê uma chance.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Confira os resultados dos names(vect).

- Class: cmd_question
  Output: Alternativamente, podemos criar um vetor vect2 sem nome com c(11, 2, NA).
    Faça isso agora.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Crie um vetor comum (sem nome) chamado vect2 que contenha c(11, 2, NA).

- Class: cmd_question
  Output: Então, podemos adicionar o atributo 'names' ao vect2 após cria-lo com
    names(vect2) <- c("foo", "bar", "norf"). Continue.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Adicione nomes ao vect2 com nomes names(vect2) <- c("foo", "bar", "norf").

- Class: cmd_question
  Output: Agora, vamos verificar que vect é igual a vect2, passando-os como
    argumentos para a função identical().
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: A função identical() nos diz se seus dois objetos do R são idênticos.

- Class: text
  Output: De fato, vect e vect2 são vetores nomeados idênticos.

- Class: mult_question
  Output: Agora, voltemos à questão de extrair elementos de um vetor através de elementos nomeados. Qual dos
    os seguintes comandos você acha que nos daria o segundo elemento do vect?
  AnswerChoices: vect["bar"]; vect[bar]; vect["2"]
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctVal='vect["bar"]')
  Hint: Se queremos o elemento chamado "bar" (ou seja, o segundo elemento do vect), que
    comando nos levaria isso?

- Class: cmd_question
  Output: Agora, experimente.
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctExpr='vect["bar"]')
  Hint: Experimente o vect ["bar"].

- Class: cmd_question
  Output: Da mesma forma, podemos especificar um vetor de nomes com vect[c("foo", "bar")]. Experimente.
  CorrectAnswer: vect[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect[c("foo", "bar")]')
  Hint: Use vect[c("foo", "bar")] para obter apenas os elementos do vect chamado "foo" e "bar".

- Class: text
  Output: Agora você conhece todos os quatro métodos de extração de subconjuntos de vetores. Diferentes abordagens serão
    melhor em diferentes cenários e em caso de dúvida, experimente!



- Class: mult_question
  Output: "Parabéns, você terminou sua lição! 
    \n\n\n\
    Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição?"
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  
  
  # End

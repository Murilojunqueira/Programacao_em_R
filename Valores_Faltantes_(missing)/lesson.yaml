- Class: meta
  Course: Programacao em R
  Lesson: Valores Faltantes (missing)
  Author: Nick Carchedi (Tradução Murilo Junqueira)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Valores faltantes (missing values) desempenham um papel importante na estatística e na análise de dados. 
    Frequentemente, valores em falta não devem ser ignorados, mas devem ser cuidadosamente estudados para
    verificar se há um padrão subjacente ou causa para o desaparecimento do valor.

- Class: text
  Output: No R, "NA" é usado para representar qualquer valor que 'não está disponível' (Not Avalible) ou 'ausente'
    (no sentido estatístico). Nesta lição, exploraremos os valores faltantes ainda mais.

- Class: cmd_question
  Output: Qualquer operação envolvendo NA geralmente produz NA como resultado. Para ilustrar,
    vamos criar um vetor c(44, NA, 5, NA) e atribuí-lo a uma variável x.
  CorrectAnswer: x <- c(44, NA, 5, NA)
  AnswerTests: omnitest(correctExpr='x <- c(44, NA, 5, NA)')
  Hint: Atribua o vetor c(44, NA, 5, NA) a uma variável x. O "NA" deve maiúsculo.

- Class: cmd_question
  Output: Agora vamos multiplicar x por 3.
  CorrectAnswer: x * 3
  AnswerTests: any_of_exprs('x * 3', '3 * x')
  Hint: Tente x * 3.

- Class: text
  Output: Observe que os elementos do vetor resultante que correspondem aos
    valores NA em x também são NA.

- Class: cmd_question
  Output: Para tornar as coisas um pouco mais interessantes, vamos criar um vetor contendo 1000 elementos
    retirados de uma distribuição normal padrão com y <- rnorm(1000).
  CorrectAnswer: y <- rnorm(1000)
  AnswerTests: omnitest(correctExpr='y <- rnorm(1000)')
  Hint: A função rnorm() gera números aleatórios a partir de uma distribuição normal padrão.
    Digite y <- rnorm(1000).

- Class: cmd_question
  Output: Em seguida, vamos criar um vetor contendo 1000 NAs com z <- rep(NA, 1000).
  CorrectAnswer: z <- rep(NA, 1000)
  AnswerTests: omnitest(correctExpr='z <- rep(NA, 1000)')
  Hint: Digite z <- rep(NA, 1000) para gerar um vetor de 1000 NAs.

- Class: cmd_question
  Output: "Finalmente, vamos selecionar 100 elementos aleatoriamente desses 2000 valores
    (combinação de y e z) de tal forma que não sabemos quantos NAs vamos acabar ou
    que posições eles ocuparão em nosso vetor final, que é my_data <- sample(c(y, z), 100)."
  CorrectAnswer: my_data <- sample(c(y, z), 100)
  AnswerTests: omnitest(correctExpr='my_data <- sample(c(y, z), 100)')
  Hint: A função sample() retorna uma amostra aleatória dos dados fornecidos como seu primeiro
    argumento (neste caso "c(y, z)") do tamanho especificado pelo segundo argumento (100).
    O comando my_data <- sample(c(y, z), 100) nos dará o que queremos.

- Class: cmd_question
  Output: Vamos primeiro fazer a pergunta de onde os NAs estão localizados em nossos dados. A função "is.na()"
    nos dirá onde cada elemento de um vetor é NA. Use is.na() em my_data e atribua o resultado a my_na.
  CorrectAnswer: my_na <- is.na(my_data)
  AnswerTests: omnitest(correctExpr='my_na <- is.na(my_data)')
  Hint: Atribua o resultado de is.na(my_data) à variável my_na.

- Class: cmd_question
  Output: Agora, imprima my_na para ver o que você criou.
  CorrectAnswer: my_na
  AnswerTests: omnitest(correctExpr='my_na')
  Hint: Digite my_na para visualizar seu conteúdo.

- Class: text
  Output: Onde quer que você veja TRUE (verdadeiro), você sabe que o elemento correspondente de my_data é NA.
    Da mesma forma, em todos os lugares que você vê um FALSE (falso), você sabe que o elemento correspondente 
    de my_data é um de nossos sorteios aleatórios da distribuição normal padrão.

- Class: cmd_question
  Output: Em nossa discussão anterior sobre operadores lógicos, introduzimos o operador "=="
    como um método de testar a igualdade entre dois objetos. Então, você pode pensar que a
    expressão my_data == NA produz os mesmos resultados que is.na(). Tente você!
  CorrectAnswer: my_data == NA
  AnswerTests: omnitest(correctExpr='my_data == NA')
  Hint: Tente my_data == NA para ver o que acontece.

- Class: text
  Output: A razão pela qual você tem um vetor de todos os elementes como NAs é que NA não é realmente um valor,
    mas apenas um espaço reservado para uma quantidade que não está disponível. Portanto, a lógica da
    expressão "my_data == NA" é incompleta e R não tem escolha senão retornar um vetor do mesmo
    comprimento como my_data que contém todos os valores NAs.

- Class: text
  Output: Não se preocupe se isso parecer um pouco confuso. O segredo aqui é ser cauteloso
    ao usar expressões lógicas em qualquer momento que os NAs se infiltrarem. Um único NA
    valor pode inviabilizar a coisa toda.

- Class: text
  Output: Então, de volta para a tarefa em mãos. Agora que temos um vetor, my_na, que tem
    um verdadeiro para cada NA e FALSE para cada valor numérico, podemos calcular o total
    número de NAs em nossos dados.

- Class: text
  Output: O truque é reconhecer que sob a superfície, R representa TRUE
    como o número 1 e FALSE como o número 0. Portanto, se tomarmos a soma de um grupo
    de TRUEs e FALSEs, obtemos o número total de TRUEs.

- Class: cmd_question
  Output: "Vamos tentar fazer isso aqui. Chame a função sum() em my_na para contar o
    número total de TRUEs em my_na e, portanto, o número total de NAs em my_data.
    Não atribua o resultado a uma nova variável."
  CorrectAnswer: sum(my_na)
  AnswerTests: omnitest(correctExpr='sum(my_na)')
  Hint: Use sum(my_na) para contar o número NAs nos dados.

- Class: cmd_question
  Output: Muito legal, né? Finalmente, vamos dar uma olhada nos dados para verificarmos 
    que tudo foi "somado". Imprime my_data no console.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Digite "my_data" no console.

- Class: cmd_question
  Output: Agora que entendemos os NAs, vamos olhar para um segundo tipo de valor faltante,
    o valor "NaN", que significa "não é um número". Para gerar NaN, tente dividir
    (usando uma barra invertida) 0 por 0 agora.
  CorrectAnswer: 0/0
  AnswerTests: omnitest(correctExpr='0/0')
  Hint: Tente 0/0.

- Class: cmd_question
  Output: Vamos fazer mais um, só por diversão. Em R, "Inf" significa infinito. o que
    acontece se você subtrair Inf de Inf?
  CorrectAnswer: Inf - Inf
  AnswerTests: omnitest(correctExpr='Inf - Inf')
  Hint: Digite Inf - Inf. Você consegue adivinhar o resultado?


- Class: text
  Output: Exatamente! Inf - Inf não é um número, portanto o R retorna NaN.


- Class: mult_question
  Output: "Parabéns, você terminou sua lição! 
    \n\n\n\
    Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição?"
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  
  
  # End

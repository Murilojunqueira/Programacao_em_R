- Class: meta
  Course: Programacao em R
  Lesson: Vetores
  Author: Nick Carchedi (Tradução Murilo Junqueira)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: A estrutura de dados mais simples e mais comum em R é o vetor.

- Class: text
  Output: 'Vetores vêm em dois tipos diferentes: vetores atômicos e listas. Um vetor atômico
    vector contém exatamente um tipo de dado, enquanto uma lista pode conter vários tipos de dados.
    Vamos explorar mais os vetores atômicos antes de chegarmos às listas.'

- Class: text
  Output: Nas lições anteriores, lidamos inteiramente com vetores numéricos, que são um
    tipo de vetor atômico. Outros tipos de vetores atômicos incluem vetor lógico, vetor de caracteres,
    números inteiros e vetor complexo. Nesta lição, vamos dar uma olhada mais de perto em vetor lógico e
    vetores de caracteres.

- Class: text
  Output: Os vetores lógicos podem conter os valores TRUE(VERDADEIRO), FALSE(FALSO) e NA(para 'não disponível').
    Esses valores são gerados como resultado de 'condições lógicas'. Vamos experimentar
    com algumas condições simples.

- Class: cmd_question
  Output: Primeiro, crie um vetor numérico chamado 'num_vect' que contenha os valores 0.5, 55, 
    -10 e 6.
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: Lembre-se de que a função c() é usada para criar um vetor. Se você esquecer
    como usá-la, use ?c para acessar o arquivo de ajuda. Não esqueça de atribuir o resultado
    para uma nova variável chamada num_vect.

- Class: cmd_question
  Output: Agora, crie uma variável chamada 'tf' que obtenha o resultado de num_vect < 1, que
    é lido como 'num_vect é menor que 1'.
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: Use tf <- num_vect <1 para atribuir o resultado de num_vect < 1 a uma variável
    chamado tf.

- Class: mult_question
  Output: Como você acha que 'tf' vai ser?
  CorrectAnswer: um vetor de 4 valores lógicos
  AnswerChoices: um vetor de 4 valores lógicos; um único valor lógico
  AnswerTests: omnitest(correctVal='um vetor de 4 valores lógicos')
  Hint: Lembre-se da nossa lição sobre aritmética vetorial? O lema foi que R realiza muitas
    operações, elemento por elemento, dentro de vetores. Nós chamamos essas operações 'vetorizadas'.

- Class: cmd_question
  Output: Imprima (print) o conteúdo de tf agora.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Apenas digite tf e pressione Enter para visualizar o seu valor.

- Class: text
  Output: O comando num_vect < 1 é uma condição lógica e tf nos informa se cada
    elemento do nosso vetor numérico, num_vect, satisfaz essa condição.

- Class: text
  Output: O primeiro elemento de num_vect é 0.5, que é menor que 1 e, portanto,
    a instrução 0.5 < 1 é VERDADEIRA. O segundo elemento de num_vect é 55, que é
    maior que 1, então a declaração 55 < 1 é FALSA. A mesma lógica aplica-se ao
    terceiro e quarto elementos.

- Class: cmd_question
  Output: Vamos tentar outro. Digite num_vect >= 6 sem atribuir o resultado a um
    nova variável.
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: Não crie uma nova variável nesta. Nós só queremos ver o resultado de
    num_vect>= 6. Certifique-se de que não haja espaço entre os símbolos `>` e `=`. Pensar
    deles como um símbolo representando 'maior que ou igual a'.

- Class: text
  Output: Desta vez, estamos perguntando se cada elemento individual de num_vect é
    maior que OU(OR) igual a 6. Como somente 55 e 6 são maiores ou iguais a 6,
    o segundo e quarto elementos do resultado são VERDADEIROS(TRUE) e os primeiro e terceiro elementos
    são FALSOS(FALSE).

- Class: text
  Output: Os símbolos `<` e `>=` nestes exemplos são chamados de 'operadores lógicos'.
    Outros operadores lógicos incluem `>`, `<=`. O simbolo `==` é a igualdade exata, e `! =` é a 
    desigualdade.

- Class: text
  Output: Se tivermos duas expressões lógicas, A e B, podemos perguntar se PELO MENOS UM
    é verdadeiro com A | B ('ou' lógico, ou 'união') ou se AMBOS são
    VERDADEIROS com A & B ('e' lógico ou 'interseção'). Por fim, !A é a negação
    de A e é verdadeiro quando A é falso e vice-versa.

- Class: text
  Output: É uma boa ideia passar algum tempo brincando com várias combinações
    desses operadores lógicos até que você fique confortável com o uso deles. Nós vamos fazer
    alguns exemplos aqui para você começar.

- Class: text
  Output: Tente o seu melhor para prever o resultado de cada uma das seguintes afirmações.
    Você pode usar lápis e papel para trabalhá-los se for útil. Se você ficar travado,
    apenas adivinhe e você tem 50% de chance de obter a resposta certa!

- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: Quebre este problema em 2 partes. O `&` no meio afirma que AMBAS
    as afirmações entre parênteses são verdadeiras. Seu trabalho é descobrir se essa é uma afirmação precisa, e, se
    assim, toda a condição é verdadeira. Se não, é falso.

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Quebre este problema em 2 partes. O `|` no meio afirma que PELO MENOS UMA
     das afirmações entre parênteses é VERDADEIRA. Seu trabalho é descobrir se isso é um
    declaração correta. Se assim for, toda a condição é verdadeira. Se não, é falso.

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Isso é complicado. Lembre-se que o símbolo `!` nega o que vier
    depois. Há também uma ordem de operações acontecendo aqui. Condições que
    estão entre parênteses devem ser avaliadas primeiro. Então, trabalhe de dentro para 
    fora dos parênteses

- Class: text
  Output: Não se preocupe se você achar que isso é complicado. Eles devem ser. Trabalhar
    com afirmações lógicas em R requer prática, mas seus esforços serão recompensados
    em lições futuras (por exemplo, subconjuntos e estruturas de controle).

- Class: text
  Output: Os vetores de caracteres também são muito comuns em R. Aspas duplas são usadas para distinguir
    objetos de caractere, como no exemplo a seguir.

- Class: cmd_question
  Output: 'Crie um vetor de caractere que contenha as seguintes palavras: "Meu", "nome",
    "é". Lembre-se de incluir cada palavra em seu próprio conjunto de aspas duplas, para que o 
    R saiba que são conjuntos de caracteres. Armazene o vetor em uma variável chamada my_char. '
  CorrectAnswer: my_char <- c("Meu", "nome", "é")
  AnswerTests: omnitest(correctExpr='my_char <- c("Meu", "nome", "é")')
  Hint: Digite my_char <- c ("Meu", "nome", "é") para criar uma nova variável chamada my_char
    que contém um vetor de caracteres de comprimento 3. Certifique-se de que as vírgulas que separam
    as palavras estão FORA das aspas duplas, ou então R vai achar que as vírgulas são parte
    das palavras.

- Class: cmd_question
  Output: Imprima o conteúdo de my_char para ver como é.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Digite my_char para visualizar seu conteúdo.

- Class: text
  Output: Agora, my_char é um vetor de caracteres de comprimento 3. Digamos que queremos
    unir os elementos de my_char em uma cadeia de caracteres contínua
    (isto é, um vetor de caracteres de comprimento 1). Podemos fazer isso usando a função paste().

- Class: cmd_question
  Output: Digite paste(my_char, collapse = " ") agora. Certifique-se de que há um espaço entre
    as aspas duplas no argumento `collapse`. Você verá porque em um segundo.
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: Use paste(my_char, collapse = " ") para unir as palavras do vetor. 
    Eles quase formam uma frase. Deve haver um único espaço entre o as aspas
    duplas no argumento `collapse` para que existam espaços únicos separando o
    palavras.

- Class: text
  Output: O argumento `collapse` para a função paste() diz ao R que quando nós nos juntamos 
    os elementos do vetor do caractere my_char, gostaríamos de separá-los
    com espaços simples.

- Class: text
  Output: Parece que estamos esquecendo alguma coisa ... Ah, sim! Seu nome!

- Class: cmd_question
  Output: 'Para adicionar (ou concatenar) seu nome ao final de my_char, use a função c()
    deste jeito: c(my_char, "seu_nome_aqui"). Coloque seu nome entre aspas duplas
    onde eu coloquei "seu_nome_aqui". Experimente agora, armazenando o resultado em uma nova variável
    chamado my_name. '
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: Coloque seu nome para o final do vetor my_char usando a função c().
    Certifique-se de atribuir o resultado a uma nova variável chamada my_name. Se seu nome era "Swirl",
    você digitaria my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Dê uma olhada no conteúdo de my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Digite my_name e pressione Enter para visualizar seu conteúdo.

- Class: cmd_question
  Output: Agora, use a função paste() mais uma vez para juntar as palavras do vetor my_name
    em uma única cadeia de caracteres. Não esqueça de dizer  collapse = " " !
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: Use o colar (my_name, collapse = " ") para unir todas as quatro palavras, separando-as
    por espaços simples.

- Class: text
  Output: Neste exemplo, usamos a função paste() para recolher os elementos de
    um vetor de caractere único; paste() também pode ser usado para unir os elementos de múltiplos
    vetores de caracteres.

- Class: cmd_question
  Output: No caso mais simples, podemos juntar dois vetores de caracteres que são cada um de 
    comprimento 1 (isto é, junte duas palavras). Tente paste("Olá", "mundo!", sep = " "), onde
    o argumento `sep` diz a R que queremos separar os elementos unidos com um
    espaço único.
  CorrectAnswer: paste("Olá", "mundo!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Olá", "mundo!", sep = " ")')
  Hint: Digite paste("Olá", "mundo!", sep = " ") para juntar as duas palavras "Olá" e
    "mundo", separados por um único espaço. Deve haver um único espaço entre o
    aspas duplas no argumento `sep` para a função paste().

- Class: cmd_question
  Output: Para um exemplo um pouco mais complicado, podemos juntar dois vetores, cada um com 3 
    elementos. Use paste() para unir o vetor de valores inteiros 1:3 com o vetor de caracteres 
    c("X", "Y", "Z"). Desta vez, use sep = "" para não deixar espaço entre os elementos unidos.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: 'Use o paste(1:3, c("X", "Y", "Z"), sep = "") para ver o que acontece quando nos juntamos
    dois vetores de igual comprimento usando paste().'

- Class: text
  Output: 'O que você acha que acontecerá se nossos vetores forem de tamanho diferente? (Dica:
    falamos sobre isso em uma lição anterior.'

- Class: cmd_question
  Output: Reciclagem de vetores! Tente paste(LETTERS, 1:4, sep = "-"), onde LETTERS é uma
    variável pré-definida em R contendo um vetor de caracteres de todas as 26 letras do
    Alfabeto Ingles.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Digite paste(LETTERS, 1:4, sep = "-") para ver como R recicla o vetor 1:4 para corresponder
    o comprimento das LETRAS. Observe que estamos usando `-` como nosso separador desta vez
    de um único espaço.

- Class: text
  Output: Como o vetor de caracteres LETTERS é maior que o vetor numérico 1:4,
    R simplesmente recicla, ou repete, 1:4 até coincidir com o comprimento das LETRAS.

- Class: text
  Output: Também digno de nota é que o vetor numérico 1:4 é 'coagido' a se transformar em um 
    vetor de caracteres pela função paste().

- Class: text
  Output: Discutiremos coerção em outra lição, mas tudo o que isso realmente significa é que o
    números 1, 2, 3 e 4 na saída acima não são mais números para R, mas sim
    caracteres "1", "2", "3" e "4".

  
- Class: mult_question
  Output: "Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição? 
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  
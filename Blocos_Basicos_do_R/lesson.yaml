- Class: meta
  Course: Programacao em R
  Lesson: Blocos Basicos do R
  Author: Nick Carchedi (tradução Murilo Junqueira)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Nesta lição, vamos explorar alguns blocos básicos da linguagem de programação R.

- Class: text
  Output: Se em algum momento você quiser mais informações sobre um determinado tópico relacionado
    ao R, você pode digitar help.start() no prompt. Isso abrirá um menu de recursos
    dentro do RStudio ou do seu navegador padrão, dependendo da sua configuração.
    Alternativamente, uma simples pesquisa na web geralmente produz a resposta que você está procurando.

- Class: cmd_question
  Output: Em sua forma mais simples, o R pode ser usado como uma calculadora interativa. Digite
    5 + 7 e pressione Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Digite 5 + 7 e aperte Enter.

- Class: text
  Output: O R simplesmente imprime o resultado de 12 por padrão. No entanto, R é uma linguagem de programação
    e muitas vezes a razão pela qual usamos uma linguagem de programação ao invés de uma calculadora
    é automatizar algum processo ou evitar repetições desnecessárias.

- Class: text
  Output: Nesse caso, podemos usar nosso resultado acima em um segundo cálculo.
    Em vez de digitar novamente 5 + 7 toda vez que precisarmos, podemos criar uma nova variável
    que armazena o resultado.

- Class: text
  Output: 'A maneira como você atribui um valor a uma variável em R é usando o operador de atribuição, 
    que é apenas um símbolo de menor (<) seguido por um sinal de negativo (-), ou seja: "<-"'

- Class: text
  Output: Pense no operador de atribuição como uma seta. Você está atribuindo o valor
    no lado direito da seta para o nome da variável no lado esquerdo da seta.

- Class: cmd_question
  Output: 'Para atribuir o resultado de 5 + 7 a uma nova variável chamada x, você digita "x <-
    5 + 7". Isto pode ser lido como: "x significa 5 mais 7". Experimente agora.'
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Digite x <- 5 + 7. É importante incluir um único espaço em cada lado
    o operador de atribuição, mas NÃO coloque um espaço entre o < e o - que
    formar a seta.

- Class: text
  Output: Você notará que R não imprimiu o resultado de 12 desta vez. Quando você
    usa o operador de atribuição, o R assume que você não quer ver o resultado imediatamente,
    mas sim que você pretende usar o resultado para outra coisa mais tarde.

- Class: cmd_question
  Output: Para visualizar o conteúdo da variável x, apenas digite x e pressione Enter. 
    Experimente isso agora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digite x e pressione Enter. Isto irá imprimir automaticamente o valor de x.

- Class: cmd_question
  Output: Agora, armazene o resultado de x - 3 em uma nova variável chamada y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Digite y <- x - 3 e pressione Enter. Se você usa x - 3 ou x - 3 é 
    preferência pessoal, mas é um bom hábito incluir um espaço em ambos os lados dos 
    operadores matemáticos.

- Class: cmd_question
  Output: Qual é o valor de y? Digite y para descobrir.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digite y e pressione Enter.

- Class: text
  Output: Agora, vamos criar uma pequena coleção de números chamada vetor. Qualquer objeto
    que contém dados no R é chamado de estrutura de dados (Data Structure). Vetores numéricos 
    são os tipos mais simples de estrutura de dados em R. Na verdade, até mesmo um único número 
    é considerado um vetor de comprimento 1.

- Class: cmd_question
  Output: A maneira mais fácil de criar um vetor é com a função c(), que significa
    "concatenar" ou "combinar". Para criar um vetor contendo os números 1.1,
    9 e 3,14, digite c(1.1, 9, 3.14). Experimente agora e armazene o resultado em uma variável
    chamado z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: A introdução de z <- c(1.1, 9, 3.14) atribuirá o vetor (1.1, 9, 3.14) a um
    nova variável chamada z. Incluir espaços únicos após as vírgulas no vetor
    não é obrigatório, mas ajuda a tornar seu código menos confuso e mais legível.

- Class: cmd_question
  Output: Sempre que tiver dúvidas sobre uma função específica, você poderá acessar os 
    arquivos de ajuda do R através do comando `?`. Por exemplo, se você quiser mais informações
    na função c(), digite ?c (sem os parênteses que normalmente seguem uma função).
    Tente agora.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Digite ?c e pressione Enter. Isso trará o arquivo de ajuda para a função c().

- Class: cmd_question
  Output: Digite z para visualizar seu conteúdo. Observe que não há vírgulas separando
    os valores na saída.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Digite z para visualizar seu conteúdo. Observe que não há vírgulas separando
    os valores na saída....

- Class: cmd_question
  Output: Você pode combinar vetores para criar um novo vetor. Crie um novo vetor que contenha
    z, 555, depois z novamente; nessa ordem. Não atribua este vetor a uma nova variável
    para que possamos ver o resultado imediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Digite c(z, 555, z). Não crie uma nova variável. Nós apenas queremos ver o resultado.

- Class: cmd_question
  Output: 'Vetores numéricos podem ser usados em expressões aritméticas. Digite o seguinte
    para ver o que acontece: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Digite z * 2 + 100, sem atribuir o resultado a uma variável. O símbolo `*`
    é usado para multiplicação e compartilha uma tecla com o número 8 em muitos teclados.

- Class: text
  Output: Primeiro, o R multiplicou cada um dos três elementos em z por 2. Em seguida, acrescentou
    100 para cada elemento para obter o resultado que você vê acima.

- Class: text
  Output: Outros operadores aritméticos comuns são +, -, / e ^ (onde x ^ 2
    significa 'x ao quadrado'). Para pegar a raiz quadrada, use a função sqrt() e para se
    obter o valor absoluto (sem negativos), use a função abs().

- Class: cmd_question
  Output: Pegue a raiz quadrada de z - 1 e atribua ela a uma nova variável chamada my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Atribua o resultado de sqrt (z - 1) a uma variável chamada my_sqrt.

- Class: mult_question
  Output: Antes de vermos o conteúdo da variável my_sqrt, o que você acha que ela
    contém?
  CorrectAnswer: um vetor de comprimento 3
  AnswerChoices: um vetor de comprimento 3; um nero ico (isto um vector de comprimento 1);
    um vetor de comprimento 0 (ou seja, um vetor vazio)
  AnswerTests: omnitest(correctVal='um vetor de comprimento 3')
  Hint: 'Pense em como R lidou com as outras operações vetorizadas: elemento por elemento.'

- Class: cmd_question
  Output: Imprima o conteúdo de my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Apenas digite my_sqrt e pressione Enter para visualizar seu valor.

- Class: text
  Output: Como você deve ter adivinhado, o R primeiro subtraiu 1 de cada elemento de z, então
    tomou a raiz quadrada de cada elemento. Isso deixa você com um vetor do mesmo
    comprimento como o vetor original z.

- Class: cmd_question
  Output: Agora, crie uma nova variável chamada my_div que obtenha o valor de z dividido
    por my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Digite my_div <- z / my_sqrt. Os espaços em ambos os lados do sinal / não são
    necessários, mas muitas vezes podem melhorar a legibilidade, fazendo o código parecer menos confuso.
    No final, é uma preferência pessoal.

- Class: mult_question
  Output: Qual afirmação você acha que é verdadeira?
  CorrectAnswer: O primeiro elemento de my_div é igual ao primeiro elemento de z dividido
    pelo primeiro elemento do my_sqrt e assim por diante ...
  AnswerChoices: O primeiro elemento de my_div é igual ao primeiro elemento de z dividido
    pelo primeiro elemento do my_sqrt e assim por diante ...; my_div é um único número (isto é, um
    vetor de comprimento 1); my_div é indefinido
  AnswerTests: omnitest(correctVal='O primeiro elemento de my_div é igual ao primeiro elemento de z dividido
    pelo primeiro elemento do my_sqrt e assim por diante ...')
  Hint: Pense em como R manipulou as outras operações vetorizadas como + e *.

- Class: cmd_question
  Output: Vá em frente e imprima o conteúdo de my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Digite my_div e pressione Enter para ver o que acontece.

- Class: text
  Output: Quando você tem dois vetores do mesmo comprimento, R executa simplesmente o especificado
    pela operação aritmética (+, -, *, etc.) elemento-a-elemento. Se os vetores
    são de diferentes comprimentos, R "recicla"" o vetor mais curto até que seja o mesmo
    comprimento como o vetor mais longo.

- Class: text
  Output: Quando fizemos z * 2 + 100 em nosso exemplo anterior, z era um vetor de comprimento
    3, mas tecnicamente 2 e 100 são vetores de comprimento 1 cada um.

- Class: text
  Output: 'Nos bastidores, o R está "reciclando" os dois vetores para fazer um vetor de 
    três 2s e três 100s. Em outras palavras, quando você pede R para calcular z
    * 2 + 100, o que realmente calcula é isto: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: Para ver outro exemplo de como esse vetor 'reciclagem' funciona, tente adicionar
    c(1, 2, 3, 4) e c(0, 10). Não se preocupe em salvar o resultado em uma nova variável.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Digite c(1, 2, 3, 4) + c(0, 10) no console para ver como R adiciona dois vetores
    de comprimento diferente. Não atribua o resultado a uma variável.

- Class: text
  Output: Se o comprimento do vetor mais curto não se divide em inteiros no comprimento
    do vetor mais longo, R ainda aplicará o método de "reciclagem"", mas lançará
    um aviso para que você saiba que algo suspeito pode estar acontecendo.

- Class: cmd_question
  Output: Tente c(1, 2, 3, 4) + c(0, 10, 100) para um exemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Digite c(1, 2, 3, 4) + c(0, 10, 100) para ver como R manipula a adição de dois vetores,
    quando o comprimento do vetor mais curto não se divide em inteiros no vetor mais longo.
    Não se preocupe em atribuir o resultado a uma variável.

- Class: text
  Output: Antes de concluir esta lição, gostaria de mostrar alguns truques para economizar tempo.

- Class: text
  Output: Anteriormente na lição, você computou z * 2 + 100. Vamos fingir que cometeu um erro 
    e que você quis adicionar 1000 em vez de 100. Você pode redigitar a expressão ou ...

- Class: cmd_question
  Output: Em muitos ambientes de programação, a seta para cima irá recuperar os comandos anteriores. 
    Tente teclar a seta para cima no seu teclado até chegar a este comando (z * 2 + 100), então mude 
    de 100 para 1000 e pressione Enter. Se a seta para cima não funcionar para você (no RStudio costuma funcionar), 
    basta digitar o comando corrigido.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Se o seu ambiente de trabalho não suportar o recurso de seta para cima (o RStudio suporta), 
    basta digitar o comando corrigido para continuar.

- Class: text
  Output: Finalmente, vamos fingir que você gostaria de ver o conteúdo de uma variável que você 
    criou anteriormente, mas você não consegue lembrar se você a nomeou my_div ou myDiv. Você poderia 
    tentar os dois e ver o que funciona, ou ...

- Class: cmd_question
  Output: 'Você pode digitar as duas primeiras letras do nome da variável e pressionar a tecla Tab 
    (possivelmente mais de uma vez). A maioria dos ambientes de programação fornecerá uma lista 
    de variáveis que você criou e que começam com "my". Isso é chamado de preenchimento automático 
    e pode ser bastante útil quando você tem muitas variáveis em seu espaço de trabalho. 
    
    Tente para ver se funciona! 
    
    (Se a conclusão automática não funcionar para você, basta digitar my_div e pressionar Enter).'
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Se o seu ambiente de programação não suportar o preenchimento automático, 
    apenas digite my_div e pressione Enter para continuar.

  
- Class: mult_question
  Output: "Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição? 
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  
- Class: meta
  Course: Programacao_em_R
  Lesson: Logica
  Author: Sean Kross (tradução Murilo Junqueira)
  Type: Standard
  Organization: swirlstats
  Version: 2.4.4


- Class: text
  Output: Esta lição pretende ser uma breve introdução às operações lógicas em R.

- Class: text
  Output: Existem dois valores lógicos em R, também chamados de valores booleanos. 
    Eles são TRUE (verdadeiro) e FALSE (falso). Em R, você pode construir expressões lógicas que 
    serão avaliadas como TRUE ou FALSE.

- Class: text
  Output: "Muitas das perguntas desta lição envolverão a avaliação de expressões lógicas
    expressões. Pode ser útil abrir um segundo terminal R, onde você pode
    experimentar algumas dessas expressões."

- Class: cmd_question
  Output: "Criar expressões lógicas requer operadores lógicos. Você provavelmente está familiarizado com
    operadores aritméticos como `+`, `-`,`*` e `/`. O primeiro operador lógico que vamos
    discutir é o operador de igualdade, representado por dois sinais de igual `==`. Use o operador de igualdade
    abaixo para descobrir se TRUE é igual a TRUE."
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Use o operador de igualdade e digite TRUE == TRUE

- Class: text
  Output: Assim como a aritmética, as expressões lógicas podem ser agrupadas usando 
    parênteses, assim, a expressão (TRUE == TRUE) == TRUE é avaliada como TRUE.

- Class: cmd_question
  Output: Para testar esta propriedade, tente avaliar (FALSE == TRUE) == FALSE.
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: "Tente digitar: (FALSE == TRUE) == FALSE"

- Class: cmd_question
  Output: O operador de igualdade também pode ser usado para comparar números. Use `==` para ver se 6 é igual a 7.
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: Use o operador de igualdade e digite 6 == 7

- Class: text
  Output: A expressão anterior é avaliada como FALSE porque 6 é menor que 7. Felizmente, há
     operadores de desigualdade que nos permitem testar se um valor é menor ou maior que outro valor.

- Class: cmd_question
  Output: O operador menor que `<` testa se o número no lado esquerdo do operador
     (chamado de operando esquerdo) é menor que o número no lado direito do operador (chamado de
     operando direito). Escreva uma expressão para testar se 6 é menor que 7.
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: Use o operador menor que e digite 6 < 7

- Class: cmd_question
  Output: Também existe um operador menor ou igual a `<=` que testa se o operando esquerdo
     é menor ou igual ao operando certo. Escreva uma expressão para testar se 10 é menor ou igual a 10.
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: Use o operador `<=` e digite 10 <= 10

- Class: text
  Output: Lembre-se de que existem os correspondentes maior que `>` e maior que ou igual a
     operadores `> =`.

- Class: mult_question
  Output: 'Qual das alternativas a seguir avalia como FALSE?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36 
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: 'Se necessário, você pode avaliar cada expressão em uma sessão R separada para encontrar a resposta correta.'

- Class: mult_question
  Output: 'Qual das opções a seguir é avaliada como TRUE?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7 
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: 'Se necessário, você pode avaliar cada expressão em uma sessão R separada para encontrar a resposta correta.'

- Class: cmd_question
  Output: O próximo operador que discutiremos é o operador 'não igual' representado por `!=`. O opeador não igual 
    (ou diferente) testa se dois os valores são desiguais, então 'TRUE != FALSE' é avaliado como VERDADEIRO. 
    Como o operador de igualdade, `!=` Também pode ser usado com números. Tente escrever uma expressão para 
    ver se 5 não é igual a 7.
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: Use o operador not equal e digite 5 != 7

- Class: cmd_question
  Output: "Para negar expressões booleanas, você pode usar o operador 'não'. Um ponto de exclamação, `!`, 
    Fará com que !TRUE (diga: não verdadeiro) seja avaliado como FALSE e !FALSE (diga: não falso) 
    seja avaliado como TRUE. Tente usar o operador não e o operador igual a para encontrar o oposto de se 
    '5 é igual a 7.'"
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: Essa expressão pode ser um pouco complicada; pense em negar a expressão 5 == 7 
    (tudo que você precisa é de uma exclamação ponto na frente).

- Class: text
  Output: Vamos tirar um momento para revisar. O operador igual, `==`, testa se dois valores booleanos ou números 
    são iguais, o operador não igual, `!=`, testa se dois valores ou números booleanos são desiguais, e o 
    operador NÃO `!` nega expressões lógicas para que expressões TRUE se tornem FALSE e expressões FALSE 
    se tornem TRUE.

- Class: mult_question
  Output: Qual das alternativas a seguir avalia como FALSE?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: 'Se necessário, você pode avaliar cada expressão em uma sessão R separada para encontrar a resposta correta.'

- Class: mult_question
  Output: 'O que você acha que a seguinte expressão avaliará ?: (TRUE! = FALSE) ==! (6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Can there be objective truth when programming?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: 'Tente avaliar cada expressão isoladamente e crie uma resposta.'

- Class: text
  Output: Em algum momento, talvez você precise examinar os relacionamentos entre várias expressões lógicas.
     É aqui que o operador E e o operador OU entram.

- Class: cmd_question
  Output: Vamos ver como o operador E funciona. Existem dois operadores E em R, `&` e `&&`.
     Ambos os operadores funcionam da mesma forma, se os operandos direito e esquerdo de E forem VERDADEIRO a
     A expressão é TRUE, caso contrário, é FALSE. Por exemplo, TRUE & TRUE é avaliado como TRUE. Tente digitar
     FALSO e FALSO na forma como é avaliado.
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: "Apenas para ilustrar como o operador E funciona, digite: FALSE & FALSE"

- Class: cmd_question
  Output: "Você pode usar o operador `&` para avaliar o operador E através de um vetor. A versão `&&` do 
    operador E apenas avalia o primeiro membro de um vetor. Vamos testar os dois para praticar. Digite a expressão 
     TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Agora, para ver como o operador E trabalha com um vetor, digite:
     TRUE & c(TRUE, FALSE, FALSE)"

- Class: text
  Output: O que acontece neste caso é que o operando esquerdo `TRUE` é reciclado
     em todos os elementos do vetor do operando certo. Isso é o equivalente
     declaração como c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

- Class: cmd_question
  Output: "Agora digitaremos a mesma expressão, exceto que usaremos o operador `&&`. Digite a expressão
     TRUE && c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE && c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: "Como você verá, a versão && do operador E funciona de maneira diferente. Digite:
     TRUE && c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "Nesse caso, o operando esquerdo é avaliado apenas com o primeiro membro
     do operando direito (o vetor). O restante dos elementos no vetor
     não são avaliados nesta expressão."
    
- Class : text
  Output: O operador OR segue um conjunto de regras semelhante. A versão `|` do OR
     avalia OR através de um vetor inteiro, enquanto a versão `||` do OR avalia apenas
     o primeiro membro de um vetor.
    
- Class : text
  Output: Uma expressão usando o operador OR será avaliada como TRUE se a esquerda
     operando ou o operando direito é TRUE. Se ambos forem TRUE, a expressão será
     avaliar como VERDADEIRO, no entanto, se nenhum deles for VERDADEIRO, a expressão será
     FALSO.
    
- Class: cmd_question
  Output: "Vamos testar a versão vetorizada do operador OR. Digite o
     expressão TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Teste o operador OR vetorizado digitando: TRUE | c(TRUE, FALSE, FALSE)"
  
- Class: cmd_question
  Output: "Agora vamos experimentar a versão não vetorizada do operador OR. Digite o
     expressão TRUE || c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE || c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Hint: "Como você verá o || versão do OR não é vetorizada. Digite:
     TRUE || c(TRUE, FALSE, FALSE)"
  
- Class : text
  Output: "Operadores lógicos podem ser encadeados como operadores aritméticos.
     As expressões: `6 != 10 && FALSE && 1 >= 2` ou` TRUE || 5 < 9.3
     || FALSE` são perfeitamente normais de se ver."
  
- Class : cmd_question
  Output: "Como você deve se lembrar, a aritmética tem uma ordem de operações e o mesmo vale para
     as expressões lógicas. Todos os operadores AND são avaliados antes dos operadores OR. Vamos olhar para
     um exemplo de um caso ambíguo. Digite: 5 > 8 || 6!= 8 && 4 > 3.9"
  CorrectAnswer: "5 > 8 || 6 != 8 && 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: "Veja como a ordem das operações funciona digitando:
     5 > 8 || 6!= 8 && 4 > 3.9"


- Class : text
  Output: "Vamos examinar a ordem das operações no caso acima. Primeiro, os
    operandos esquerdo e direito do operador AND são avaliados. Temos que 6 não é igual a 8,
    4 é maior que 3,9; portanto, ambos os operandos são TRUE, portanto a expressão resultante
    `TRUE && TRUE` é avaliado como TRUE. Em seguida, o operando esquerdo do operador OR é
    avaliado: 5 não é maior que 8, portanto, toda a expressão é reduzida para FALSE
    || VERDADE. Como o operando certo dessa expressão é VERDADEIRO, toda a expressão
    avalia como VERDADEIRO."
    
- Class: mult_question
  Output: Qual das seguintes expressões avalia como TRUE?
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: 'Tente avaliar cada expressão isoladamente e crie uma resposta.'
  
- Class: mult_question
  Output: Qual das seguintes expressões avalia como FALSE?
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79; 6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint: 'Tente avaliar cada expressão isoladamente e crie uma resposta.'
  
- Class : text
  Output: "Agora que você está familiarizado com os operadores lógicos do R, pode tirar proveito
    de algumas funções que R fornece para lidar com expressões lógicas."
    
- Class : cmd_question
  Output: "A função isTRUE() possui um argumento. Se esse argumento for avaliado como
    TRUE, a função retornará TRUE. Caso contrário, a função retornará FALSE.
    Tente usar esta função digitando: isTRUE(6> 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Teste isTRUE() digitando: isTRUE(6> 4)"
  
- Class: mult_question
  Output: Qual das opções a seguir é avaliada como TRUE?
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE); isTRUE(3); isTRUE(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: 'isTRUE() retornará TRUE apenas se a declaração passada como argumento for TRUE.'
  
- Class : cmd_question
  Output: "A função identical() retornará TRUE se os dois objetos R passados para ele como argumentos
    são idênticos. Experimente a função idêntico () digitando: idêntico ('gêmeos', 'gêmeos')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: "Se você deseja ver se dois objetos R são idênticos, digite: identical('gêmeos', 'gêmeos')"
  
- Class: mult_question
  Output: Qual das opções a seguir é avaliada como TRUE?
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "identical() somente será avaliado como VERDADEIRO se seus argumentos forem exatamente os mesmos."
  
- Class : cmd_question
  Output: "Você também deve estar ciente da função xor(), que recebe dois argumentos.
    A função xor() significa 'OU exclusivo'.
    Se um argumento é avaliado como VERDADEIRO e um argumento é avaliado como FALSO, então este
    A função retornará TRUE, caso contrário, retornará FALSE. Experimente a função xor()
    digitando: xor (5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Teste a função xor() digitando: xor(5 == 6, !FALSE)"
  
- Class : text
  Output: "5 == 6 avalia como FALSE,!FALSE avalia como TRUE, então xor(FALSE, TRUE)
    avalia como VERDADEIRO. Por outro lado, se o primeiro argumento foi alterado para 5 == 5
    e o segundo argumento não foi alterado, os dois argumentos teriam sido VERDADEIROS,
    então xor(TRUE, TRUE) teria avaliado como FALSE."
    
- Class: mult_question
  Output: Qual das opções a seguir é avaliada como FALSE?
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "Para que o xor() seja avaliado como VERDADEIRO, um argumento deve ser VERDADEIRO e 
    o outro deve ser FALSO."
    
- Class : cmd_question
  Output: "Para as próximas perguntas, precisaremos criar um vetor de
    inteiros chamados ints. Crie esse vetor digitando: ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "Para criar um vetor de dez números inteiros sem tipo de substituição: ints <- sample(10)"
  
- Class : cmd_question
  Output: "Agora, basta exibir o conteúdo do novo vetor."
  CorrectAnswer: "ints"
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "Para visualizar o vetor digite 'ints'"
  
- Class : cmd_question
  Output: "O vetor `ints 'é uma amostra aleatória de números inteiros de 1 a 10 sem
    substituição. Digamos que queremos fazer algumas perguntas lógicas sobre o conteúdo
    de ints. Se digitarmos ints > 5, obteremos um vetor lógico correspondente a
    se cada elemento de ints é maior que 5. Tente digitar: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "Para ver quais elementos de `ints` são maiores que 5, digite: ints> 5"
  
- Class : text
  Output: "Podemos usar o vetor lógico resultante para fazer outras perguntas sobre ints.
    A função which() pega um vetor lógico como argumento e retorna os índices
    do vetor que é VERDADEIRO. Por exemplo, qual (c(TRUE, FALSE, TRUE)) retornaria
    o vetor c(1, 3)."

- Class : cmd_question
  Output: "Use a função which() para encontrar os índices de ints maiores
    que 7. "
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Use a função which() no vetor lógico produzido por: `ints > 7`"
  
- Class: mult_question
  Output: Qual dos seguintes comandos produziria os índices dos elementos em ints que
    são menores ou iguais a 2?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Use a função which().'
  
- Class : text
  Output: "Como a função which(), as funções any() e all() usam vetores lógicos 
    como argumento. A função any() retornará TRUE se um ou mais
    dos elementos no vetor lógico é VERDADEIRO. A função all() retornará
    TRUE se cada elemento no vetor lógico for TRUE."
    
- Class : cmd_question
  Output: "Use a função any() para verificar se algum dos elementos de ints é menos
    que zero."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Use a função any() no vetor lógico produzido por: `ints < 0`"
  
- Class : cmd_question
  Output: "Use a função all() para ver se todos os elementos de ints são maiores
    que zero."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Use a função all() no vetor lógico produzido por: `ints> 0`"
  
- Class: mult_question
  Output: Qual das opções a seguir é avaliada como TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() será avaliado como TRUE se houver um ou mais elementos TRUE em um vetor lógico."
  
- Class : text
  Output: "Isso é tudo para esta introdução à lógica em R. Se você realmente quer ver
    o que você pode fazer com a lógica, confira a lição do fluxo de controle!"

  
- Class: mult_question
  Output: Gostaria de informar ao seu instrutor sobre sua conclusão bem-sucedida desta lição?
  CorrectAnswer: NULL
  AnswerChoices: Sim;Nao
  AnswerTests: submit_log()
  Hint: É importante deixar seu instrutor saber que você terminou a lição.
  
